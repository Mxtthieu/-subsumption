<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<constant name="DUREE" value="450"/>
<constant name="VIT_MAX" value="250"/>


<!--node Thymio II 0 sur DESKTOP-8TN7AJD - 7772-->
<node name="Thymio II 0 sur DESKTOP-8TN7AJD - 7772" nodeId="{3e54b720-bb88-499a-b0cb-2e694cc37e39}"><![CDATA[#*
 * Fichier définissant le contrôle d'un Thymio 2
 *
 * À vous de jouer :
 * - normalisation des données et 
 * - calcul des vitesses de roues souhaitées
 *
 *#
 
 # PERRIGOT Matthieu
 # Pas de binome (j'ai vu en binome sur arche je pensais que c'était en solo)
 #*
 J'ai essayé d'utiliser un code couleur que j'ai considéré interessant pour nos capteurs :
 Vert = Tout va bien, on avance
 Bleu = Obstacle gauche
 Violet = Obstacle droite
 Rouge = Obstacle devant
 *#
 
# numéro du capteur
var cpt
# donnée capteur normalisée
var npi[7]
# variable d'état pour jouer avec les leds
var etat=0
#* etat precedant pour eviter le gauche-droite à l'infini dans un angle
0 : obstacle gauche on tourne à droite
1 : obstacle droite on tourne à gauche
2 : obstacle devant on tourne à gauche (c'est un choix)
3 : on avance
*#
var prec
# coupe le timer 0 et 1
timer.period[0] = 0
timer.period[1] = 0


# Boucle principale (liée au timer 0)
onevent timer0
etat=(etat+1)%36
if etat==0 then
  call leds.circle(32,0,0,0,0,0,0,0)    
  call leds.buttons(0,0,0,0)
  call leds.prox.h(0,0,0,0,0,0,0,0)
end
if etat==2 then
  call leds.circle(0,0,0,0,0,0,0,0)
  call leds.prox.h(0,0,0,0,0,0,0,32)
  call leds.buttons(32,0,0,0)
end
if etat==4 then
  call leds.circle(0,32,0,0,0,0,0,0)
  call leds.prox.h(0,0,0,0,0,0,32,32)
  call leds.buttons(32,32,0,0)
end
if etat==6 then
  call leds.circle(0,0,32,0,0,0,0,0)
  call leds.prox.h(32,0,0,0,0,0,32,32)
  call leds.buttons(32,32,32,0)
end
if etat==8 then
  call leds.circle(0,0,0,32,0,0,0,0)
  call leds.prox.h(32,0,0,0,0,32,32,32)
  call leds.buttons(32,32,32,32)
end
if etat==10 then
  call leds.circle(0,0,0,0,32,0,0,0)
  call leds.prox.h(32,32,0,0,0,32,32,32)
  call leds.buttons(32,0,0,0)
end
if etat==12 then
  call leds.circle(0,0,0,0,0,32,0,0)
  call leds.prox.h(32,32,0,0,32,32,32,32)
  call leds.buttons(32,32,0,0)
end
if etat==14 then
  call leds.circle(0,0,0,0,0,0,32,0)
  call leds.prox.h(32,32,32,0,32,32,32,32)
  call leds.buttons(32,32,32,0)
end
if etat==16 then
  call leds.circle(0,0,0,0,0,0,0,32)
  call leds.prox.h(32,32,32,32,32,32,32,32)
  call leds.buttons(32,32,32,32)
end
if etat==18 then
  call leds.circle(0,0,0,0,0,0,0,0)    
  call leds.buttons(0,0,0,0)
  call leds.prox.h(32,32,32,0,32,32,32,32)
end
if etat==20 then
  call leds.circle(32,0,0,0,0,0,0,0)
  call leds.prox.h(32,32,0,0,32,32,32,32)
  call leds.buttons(0,0,0,32)
end
if etat==22 then
  call leds.circle(0,32,0,0,0,0,0,0)
  call leds.prox.h(32,32,0,0,0,32,32,32)
  call leds.buttons(0,0,32,32)
end
if etat==24 then
  call leds.circle(0,0,32,0,0,0,0,0)
  call leds.prox.h(32,0,0,0,0,32,32,32)
  call leds.buttons(0,32,32,32)
end
if etat==26 then    
  call leds.circle(0,0,0,32,0,0,0,0)
  call leds.prox.h(32,0,0,0,0,0,32,32)
  call leds.buttons(32,32,32,32)
end
if etat==28 then
  call leds.circle(0,0,0,0,32,0,0,0)
  call leds.prox.h(0,0,0,0,0,0,32,32)
  call leds.buttons(0,0,0,32)
end
if etat==30 then
  call leds.circle(0,0,0,0,0,32,0,0)
  call leds.prox.h(0,0,0,0,0,0,0,32)
  call leds.buttons(0,0,32,32)
end
if etat==32 then
  call leds.circle(0,0,0,0,0,0,32,0)
  call leds.prox.h(0,0,0,0,0,0,0,32)
  call leds.buttons(0,32,32,32)
end
if etat==34 then    
  call leds.circle(0,0,0,0,0,0,0,32)
  call leds.prox.h(0,0,0,0,0,0,0,0)
  call leds.buttons(32,32,32,32)
end

call leds.top(0,32,0)
call leds.bottom.left(8,0,32)
call leds.bottom.right(8,0,32)
call leds.prox.v(32,32)

# On fait avancer le robot tout droit
motor.left.target  = VIT_MAX
motor.right.target = VIT_MAX

# Les capteurs vont de 0 à 6, de l'avt G à l'arr D
for cpt in 0:6 do
	# vous pouvez normaliser la valeur
	npi[cpt] = prox.horizontal[cpt] 
end

# boucle qui tourne le robot lorsqu'un obstacle est détecté
if ((npi[0] >= 4400) or (npi[1] >= 4400)) then
		if (prec == 1) then
			motor.left.target = -VIT_MAX
			motor.right.target = VIT_MAX
			timer.period[1] = DUREE
			prec = 1
		else
			motor.left.target = VIT_MAX
			motor.right.target = -VIT_MAX		
			timer.period[1] = DUREE
			prec = 0
		end
		call leds.top(0,0,32)
elseif ((npi[3] >= 4400) or (npi[4] >= 4400)) then
		if (prec == 0) then
			motor.left.target = VIT_MAX
			motor.right.target = -VIT_MAX
			timer.period[1] = DUREE
			prec = 0
		else
			motor.left.target = -VIT_MAX
			motor.right.target = VIT_MAX		
			timer.period[1] = DUREE
			prec = 1
		end
		call leds.top(16,0,32)
elseif ((npi[2] >= 4400)) then
		motor.left.target = -VIT_MAX
		motor.right.target = VIT_MAX		
		timer.period[1] = DUREE
		prec = 2
		call leds.top(32,0,0)
else
		prec = 3
end

# Appuyer sur le bouton avant lance la boucle principale
onevent button.forward
timer.period[0] = 100  # lance la boucle principale


# Appuyer sur le bouton central arrête le robot
onevent button.center
timer.period[0] = 0         # stoppe le timer 0
timer.period[1] = 0         # stoppe le timer 1
motor.left.target  = 0      # arrête le robot
motor.right.target = 0
]]></node>


</network>
